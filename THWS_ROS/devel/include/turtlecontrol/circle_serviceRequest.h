// Generated by gencpp from file turtlecontrol/circle_serviceRequest.msg
// DO NOT EDIT!


#ifndef TURTLECONTROL_MESSAGE_CIRCLE_SERVICEREQUEST_H
#define TURTLECONTROL_MESSAGE_CIRCLE_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlecontrol
{
template <class ContainerAllocator>
struct circle_serviceRequest_
{
  typedef circle_serviceRequest_<ContainerAllocator> Type;

  circle_serviceRequest_()
    : x(0.0)
    , tz(0.0)  {
    }
  circle_serviceRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , tz(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _tz_type;
  _tz_type tz;





  typedef boost::shared_ptr< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct circle_serviceRequest_

typedef ::turtlecontrol::circle_serviceRequest_<std::allocator<void> > circle_serviceRequest;

typedef boost::shared_ptr< ::turtlecontrol::circle_serviceRequest > circle_serviceRequestPtr;
typedef boost::shared_ptr< ::turtlecontrol::circle_serviceRequest const> circle_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator1> & lhs, const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.tz == rhs.tz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator1> & lhs, const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlecontrol

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc3db95a57294e8a3ce4451857513454";
  }

  static const char* value(const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc3db95a57294e8aULL;
  static const uint64_t static_value2 = 0x3ce4451857513454ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlecontrol/circle_serviceRequest";
  }

  static const char* value(const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 tz\n"
"\n"
;
  }

  static const char* value(const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.tz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct circle_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlecontrol::circle_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlecontrol::circle_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "tz: ";
    Printer<float>::stream(s, indent + "  ", v.tz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLECONTROL_MESSAGE_CIRCLE_SERVICEREQUEST_H
